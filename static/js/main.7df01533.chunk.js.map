{"version":3,"sources":["assets/AdvanceLogo.png","shared/NavBar.js","shared/Page.js","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","createStyles","logo","maxWidth","marginLeft","root","flexGrow","loginButton","NavBar","classes","AppBar","color","position","Toolbar","IconButton","edge","aria-label","src","alt","className","Button","variant","Page","children","styles","theme","mainTitle","display","titleSpacing","marginRight","breakpoints","down","page","minHeight","Home","Grid","container","justify","alignItems","item","Typography","component","direction","xs","sm","spacing","TextField","id","label","fullWidth","App","path","exact","Component","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","type","primary","main","dark","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,gTCyBrCC,EAAYC,YACdC,YAAa,CACTC,KAAM,CACFC,SAAU,IACVC,WAAY,IAEhBC,KAAM,CACFC,SAAU,GAEdC,YAAa,CACTH,WAAY,WAMTI,EA/BA,WACX,IAAMC,EAAUV,IAChB,OACI,kBAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,UAC7B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQJ,MAAM,UAAUK,aAAW,QAChD,kBAAC,IAAD,OAEJ,yBAAKC,IAAKf,IAAMgB,IAAI,OAAOC,UAAWV,EAAQP,OAC9C,kBAACkB,EAAA,EAAD,CAAQC,QAAQ,WAAWF,UAAWV,EAAQF,aAA9C,YCPDe,EATF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACZ,OACI,oCACI,kBAAC,EAAD,MACEA,I,2BC8BRC,EAASxB,aAAW,SAAAyB,GAAK,MAAK,CAChCC,UAAW,CACPC,QAAS,eACT,SAAU,CACNA,QAAS,UAGjBC,aAAa,aACTC,YAAa,QACZJ,EAAMK,YAAYC,KAAK,MAAO,CAC3BF,YAAa,UAGrBG,KAAM,CACFC,UAAW,aAIJC,EAlDF,WACT,IAAMzB,EAAUe,IAChB,OACI,kBAAC,EAAD,KACI,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASnB,UAAWV,EAAQuB,MACpE,kBAACG,EAAA,EAAD,CAAMI,MAAI,EAACpB,UAAWV,EAAQmB,cAC1B,kBAACY,EAAA,EAAD,CAAYrB,UAAWV,EAAQiB,UAAWL,QAAQ,KAAKV,MAAM,UAAU8B,UAAU,KAC7E,2CACA,4CACA,wCACA,+CAGR,kBAACN,EAAA,EAAD,CAAMM,UAAU,OAAOF,MAAI,EAACH,WAAS,EAACM,UAAU,SAASC,GAAI,GAAIC,GAAI,EAAGC,QAAS,GAC7E,kBAACV,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACO,EAAA,EAAD,CAAWC,GAAG,WAAWC,MAAM,WAAW3B,QAAQ,WAAW4B,WAAS,KAE1E,kBAACd,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACO,EAAA,EAAD,CAAWC,GAAG,WAAWC,MAAM,YAAY3B,QAAQ,WAAW4B,WAAS,KAE3E,kBAACd,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACO,EAAA,EAAD,CAAWC,GAAG,SAASC,MAAM,QAAQ3B,QAAQ,WAAW4B,WAAS,KAErE,kBAACd,EAAA,EAAD,CAAMI,MAAI,EAACF,QAAQ,WAAWD,WAAS,GACnC,kBAAChB,EAAA,EAAD,CAAQC,QAAQ,WAAWV,MAAM,WAAjC,uB,gBCPTuC,E,iLAXT,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACX,UAAWP,IACjC,kBAAC,IAAD,CAAOO,UAAWnB,IAFpB,U,GAJU+B,aCGAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCVAC,EAAYC,YAAe,CAC7BC,QAAS,CACLC,KAAM,OACNC,QAAQ,CACJC,KAAM,UACNC,KAAM,cAKlBC,IAASC,OACL,kBAACC,EAAA,EAAD,CAAe3C,MAAOkC,GAClB,kBAACU,EAAA,EAAD,MACA,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD4GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7df01533.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AdvanceLogo.faa7be8c.png\";","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport logo from '../assets/AdvanceLogo.png';\n\nconst NavBar = () => {\n    const classes = useStyles();\n    return (\n        <AppBar color=\"default\" position=\"sticky\">\n            <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <img src={logo} alt='logo' className={classes.logo} />\n                <Button variant=\"outlined\" className={classes.loginButton}>Login</Button>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nconst useStyles = makeStyles(\n    createStyles({\n        logo: {\n            maxWidth: 160,\n            marginLeft: 10\n        },\n        root: {\n            flexGrow: 1,\n        },\n        loginButton: {\n            marginLeft: \"auto\"\n        },\n    })\n);\n\n\nexport default NavBar;\n","import React from 'react'\nimport NavBar from './NavBar'\n\nconst Page = ({ children }) => {\n    return (\n        <>\n            <NavBar />\n            { children }\n        </>\n    );\n}\n\nexport default Page","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Page from '../shared/Page';\nimport { Typography, TextField, Grid, Button } from '@material-ui/core';\n\nconst Home = () => {\n    const classes = styles();\n    return (\n        <Page>\n            <Grid container justify=\"center\" alignItems=\"center\" className={classes.page}>\n                <Grid item className={classes.titleSpacing}>\n                    <Typography className={classes.mainTitle} variant=\"h2\" color=\"primary\" component=\"p\">\n                        <span>Ready to </span>\n                        <span>land your </span>\n                        <span>dream </span>\n                        <span>internship?</span>\n                    </Typography>\n                </Grid>\n                <Grid component=\"form\" item container direction=\"column\" xs={10} sm={2} spacing={2}>\n                    <Grid item>\n                        <TextField id=\"username\" label=\"Username\" variant=\"outlined\" fullWidth />\n                    </Grid>\n                    <Grid item>\n                        <TextField id=\"fullName\" label=\"Full Name\" variant=\"outlined\" fullWidth />\n                    </Grid>\n                    <Grid item>\n                        <TextField id=\"email4\" label=\"Email\" variant=\"outlined\" fullWidth />\n                    </Grid>\n                    <Grid item justify=\"flex-end\" container>\n                        <Button variant=\"outlined\" color=\"primary\">Create Account</Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Page>\n    );\n};\n\nconst styles = makeStyles(theme => ({\n    mainTitle: {\n        display: 'inline-block',\n        '& span': {\n            display: 'block'\n        }\n    },\n    titleSpacing: {\n        marginRight: '80px',\n        [theme.breakpoints.down('xs')]:{\n            marginRight: 'unset'\n        }\n    },\n    page: {\n        minHeight: '100vh'\n    }\n}));\n\nexport default Home;","import React, { Component } from 'react'\nimport './App.css';\nimport Home from './screens/Home';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Page from './shared/Page';\n// import ColorScheme from './shared/ColorScheme';\n// import Main from './screens/Main';\n// import Survey from './screens/Survey';\n\n  class App extends Component {\n    render() {\n      return (\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route component={Page} /> { /* This is a catch-all route */ }\n          </Switch>\n        </BrowserRouter>\n      )\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core'\nimport { createMuiTheme } from '@material-ui/core/styles'\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary:{\n            main: '#BB86FC',\n            dark: '#BB86FC'\n        }\n    }\n});\n\nReactDOM.render(\n    <ThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}