{"version":3,"sources":["assets/AdvanceLogo.png","shared/NavBar/index.js","screens/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","createStyles","logo","maxWidth","marginLeft","root","flexGrow","loginButton","NavBar","classes","className","AppBar","position","style","background","Toolbar","IconButton","edge","color","aria-label","src","alt","Button","theme","createMuiTheme","palette","primary","deepPurple","secondary","main","styles","menuBar","mainTitle","marginTop","width","Home","Typography","variant","component","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,uTC2BrCC,EAAYC,YACdC,YAAa,CACTC,KAAM,CACFC,SAAU,IACVC,WAAY,IAEhBC,KAAM,CACFC,SAAU,GAEdC,YAAa,CACTH,WAAY,WAMTI,EAjCA,WACX,IAAMC,EAAUV,IAChB,OACI,yBAAKW,UAAWD,EAAQJ,MACpB,kBAACM,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAAEC,WAAY,YAC3C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAChD,kBAAC,IAAD,OAEJ,yBAAKC,IAAKlB,IAAMmB,IAAI,OAAOX,UAAWD,EAAQP,OAC9C,kBAACoB,EAAA,EAAD,CAAQJ,MAAM,UAAUR,UAAWD,EAAQF,aAA3C,a,yCCHdgB,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAASC,IACTC,UAAW,CACPC,KAAM,cAKZC,EAAS9B,aAAW,SAAAuB,GAAK,MAAK,CAChCQ,QAAS,CAEL3B,WAAY,QAEhB4B,UAAW,CACP5B,WAAY,QACZ6B,UAAW,QACXC,MAAO,SAEX7B,KAAM,CACFS,WAAY,eAILqB,EAjCF,WACT,IAAM1B,EAAUqB,IAChB,OACQ,kBAAC,IAAD,CAAkBP,MAAOA,GACrB,kBAACa,EAAA,EAAD,CAAY1B,UAAWD,EAAQuB,UAAWK,QAAQ,KAAKnB,MAAM,YAAYoB,UAAU,KAAnF,0CCQDC,G,uLAVT,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUC,cCIAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.48553248.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AdvanceLogo.faa7be8c.png\";","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport logo from '../../assets/AdvanceLogo.png';\n\nconst NavBar = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" style={{ background: '#545454' }}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <img src={logo} alt='logo' className={classes.logo} />\n                    <Button color=\"inherit\" className={classes.loginButton}>Login</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles(\n    createStyles({\n        logo: {\n            maxWidth: 160,\n            marginLeft: 10,\n        },\n        root: {\n            flexGrow: 1,\n        },\n        loginButton: {\n            marginLeft: \"auto\"\n        },\n    })\n);\n\n\nexport default NavBar;\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\n// import NavBar from '../../shared/NavBar/index';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n\n\nconst Home = () => {\n    const classes = styles();\n    return (\n            <MuiThemeProvider theme={theme}>\n                <Typography className={classes.mainTitle} variant=\"h2\" color='secondary' component=\"p\">Ready to land your dream internship?</Typography>\n            </MuiThemeProvider>\n    );\n};\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: deepPurple,\n        secondary: {\n            main: '#BB86FC',\n        },\n    },\n});\n\nconst styles = makeStyles(theme => ({\n    menuBar: {\n        // Ensures buttons are right-aligned\n        marginLeft: 'auto'\n    },\n    mainTitle: {\n        marginLeft: '230px',\n        marginTop: '213px',\n        width: '300px',\n    },\n    root: {\n        background: '#F1F1F1',\n    }\n}));\n\nexport default Home;","import React, { Component } from 'react'\nimport './App.css';\nimport NavBar from './shared/NavBar/'\nimport Home from './screens/Home';\nimport ColorScheme from './shared/ColorScheme';\n// import Main from './screens/Main';\n// import Survey from './screens/Survey';\n\n  class App extends Component {\n    render() {\n      return (\n        <div>\n          <NavBar />\n          <Home />\n          {/* <ColorScheme /> */}\n        </div>\n      )\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}